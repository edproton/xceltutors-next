generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  TUTOR
  STUDENT
  ADMIN
  MODERATOR
}

model ProviderAccount {
  id              Int       @id @default(autoincrement())
  provider        String
  oauthProviderId String
  userId          Int
  email           String
  imageUrl        String?
  accessToken     String?
  refreshToken    String?
  expiresAt       DateTime?

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  sessions Session[]

  @@unique([provider, oauthProviderId])
}

model CredentialsProvider {
  id           Int    @id @default(autoincrement())
  userId       Int    @unique
  email        String @unique
  passwordHash String

  failedAttempts  Int       @default(0)
  lastFailedAt    DateTime?
  lockedUntil     DateTime?
  lastPasswordAt  DateTime  @default(now())
  passwordHistory Json?

  mfaEnabled  Boolean  @default(false)
  mfaType     MFAType?
  mfaSecret   String?
  backupCodes Json?

  resetToken          String?   @unique
  resetTokenExpiresAt DateTime?

  sessions Session[]

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum MFAType {
  TOTP
  SMS
  EMAIL
}

model User {
  id          Int                  @id @default(autoincrement())
  sessions    Session[]
  accounts    ProviderAccount[]
  credentials CredentialsProvider?
  image       String?
  name        String
  roles       Role[]

  hostedBookings     Booking[]           @relation("BookingHost")
  joinedBookings     Booking[]           @relation("BookingParticipants")
  recurringTemplates RecurringTemplate[] @relation("TemplateHost")
}

model Session {
  id                 String             @id
  userId             Int
  expiresAt          DateTime
  authenticationType AuthenticationType

  providerAccountId Int?
  credentialsId     Int?

  user            User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  providerAccount ProviderAccount?     @relation(fields: [providerAccountId], references: [id], onDelete: Cascade)
  credentials     CredentialsProvider? @relation(fields: [credentialsId], references: [id], onDelete: Cascade)

  @@index([providerAccountId])
  @@index([credentialsId])
}

enum AuthenticationType {
  OAUTH
  CREDENTIALS
}

enum BookingType {
  FREE_MEETING
  LESSON
}

enum BookingStatus {
  AWAITING_TUTOR_CONFIRMATION
  AWAITING_STUDENT_CONFIRMATION
  AWAITING_PAYMENT
  PAYMENT_FAILED
  SCHEDULED
  CANCELED
  COMPLETED
  REFUNDED
  AWAITING_REFUND
  REFUND_FAILED
}

enum RecurrencePattern {
  WEEKLY
  BIWEEKLY
  MONTHLY
}

enum WeekDay {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum RecurringTemplateStatus {
  ACTIVE
  INACTIVE
}

model RecurringTemplate {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String
  description String?

  // Host of the recurring booking
  hostId Int
  host   User @relation("TemplateHost", fields: [hostId], references: [id])

  status RecurringTemplateStatus @default(ACTIVE)

  // Template configuration
  recurrencePattern RecurrencePattern
  timeSlots         RecurringTimeSlot[]
  durationMinutes   Int                 @default(60)

  // Link to generated bookings
  bookings Booking[] @relation("RecurringBookings")

  @@index([hostId])
}

model RecurringTimeSlot {
  id         Int               @id @default(autoincrement())
  weekDay    WeekDay
  startTime  DateTime // Store only the time part
  templateId Int
  template   RecurringTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@unique([templateId, weekDay, startTime])
}

model Booking {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime

  type   BookingType
  status BookingStatus

  // Host relationship
  hostId Int
  host   User @relation("BookingHost", fields: [hostId], references: [id])

  // Participants
  participants User[] @relation("BookingParticipants")

  // Recurring booking relationship - null for one-off bookings
  recurringTemplateId Int?
  recurringTemplate   RecurringTemplate? @relation("RecurringBookings", fields: [recurringTemplateId], references: [id])

  // Payment relationship
  payment Payment?

  @@index([hostId])
  @@index([recurringTemplateId])
  @@index([startTime, endTime])
}

model Payment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sessionId       String? @unique
  paymentIntentId String? @unique
  chargeId        String?
  sessionUrl      String?

  metadata Json?

  bookingId Int     @unique
  booking   Booking @relation(fields: [bookingId], references: [id])
}
